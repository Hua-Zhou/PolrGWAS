var documenterSearchIndex = {"docs":
[{"location":"#OrdinalGWAS.jl-1","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"","category":"section"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"OrdinalGWAS.jl is a Julia package for performing genome-wide association studies (GWAS) for ordered categorical phenotypes using proportional odds model or ordred Probit model. It is useful when the phenotype takes ordered discrete values, e.g., disease status (undiagnosed, pre-disease, mild, moderate, severe).","category":"page"},{"location":"#Installation-1","page":"OrdinalGWAS.jl","title":"Installation","text":"","category":"section"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"This package requires Julia v0.7 or later and two other unregistered packages SnpArrays.jl and OrdinalMultinomialModels.jl. The package has not yet been registered and must be installed using the repository location. Start julia and use the ] key to switch to the package manager REPL","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"(v1.1) pkg> add https://github.com/OpenMendel/SnpArrays.jl\n(v1.1) pkg> add https://github.com/OpenMendel/OrdinalMultinomialModels.jl\n(v1.1) pkg> add https://github.com/OpenMendel/OrdinalGWAS.jl","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"# machine information for this tutorial\nversioninfo()","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"Julia Version 1.2.0\nCommit c6da87ff4b (2019-08-20 00:03 UTC)\nPlatform Info:\n  OS: macOS (x86_64-apple-darwin18.6.0)\n  CPU: Intel(R) Core(TM) i7-4850HQ CPU @ 2.30GHz\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-6.0.1 (ORCJIT, haswell)","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"# for use in this tutorial\nusing BenchmarkTools, CSV, Glob, OrdinalGWAS, SnpArrays","category":"page"},{"location":"#Example-data-set-1","page":"OrdinalGWAS.jl","title":"Example data set","text":"","category":"section"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"data folder of the package contains an example data set. In general, user can locate this folder by command","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"using OrdinalGWAS\nconst datadir = normpath(joinpath(dirname(pathof(OrdinalGWAS)), \"../data/\"))","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"\"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/\"","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"# content of the data folder\nreaddir(glob\"*.*\", datadir)","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"7-element Array{String,1}:\n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/covariate.txt\"        \n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.bed\"          \n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.bim\"          \n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.fam\"          \n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.map\"          \n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap_snpsetfile.txt\"\n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/simtrait.jl\"","category":"page"},{"location":"#Basic-usage-1","page":"OrdinalGWAS.jl","title":"Basic usage","text":"","category":"section"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"The following command performs GWAS using the proportional odds model. The output is the fitted null model.","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"ordinalgwas(@formula(trait ~ sex), datadir * \"covariate.txt\", datadir * \"hapmap3\")","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"StatsModels.TableRegressionModel{OrdinalMultinomialModel{Int64,Float64,LogitLink},Array{Float64,2}}\n\ntrait ~ sex\n\nCoefficients:\n──────────────────────────────────────────────────────\n               Estimate  Std.Error   t value  Pr(>|t|)\n──────────────────────────────────────────────────────\nintercept1|2  -1.48564    0.358891  -4.13952    <1e-4 \nintercept2|3  -0.569479   0.341044  -1.66981    0.0959\nintercept3|4   0.429815   0.339642   1.26549    0.2066\nsex            0.424656   0.213914   1.98517    0.0480\n──────────────────────────────────────────────────────","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"For documentation of the ordinalgwas function, type ?ordinalgwas in Julia REPL.","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"ordinalgwas","category":"page"},{"location":"#OrdinalGWAS.ordinalgwas","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.ordinalgwas","text":"ordinalgwas(nullformula, covfile, plinkfile)\nordinalgwas(nullformula, df, plinkfile)\nordinalgwas(fittednullmodel, plinkfile)\nordinalgwas(fittednullmodel, bedfile, bimfile, bedn)\n\nPositional arguments\n\nnullformula::FormulaTerm: formula for the null model.\ncovfile::AbstractString: covariate file (csv) with one header line. One column    should be the ordinal phenotype coded as integers starting from 1.  For example,    ordinal phenotypes can be coded as 1, 2, 3, 4 but not 0, 1, 2, 3.  \ndf::DataFrame: DataFrame containing response and regressors for null model.\nplinkfile::AbstractString: Plink file name without the bed, fam, or bim    extensions. If plinkfile==nothing, only null model is fitted. If plinkfile    is provided, bed, bim, and fam file with same plinkfile prefix need to exist.    Compressed file formats such as gz and bz2 are allowed. Check all allowed formats    by SnpArrays.ALLOWED_FORMAT.  \nfittednullmodel::StatsModels.TableRegressionModel: the fitted null model    output from ordinalgwas(nullformula, covfile) or ordinalgwas(nullformula, df).\nbedfile::Union{AbstractString,IOStream}: path to Plink bed file with full file name.\nbimfile::Union{AbstractString,IOStream}: path to Plink bim file with full file name.\nbedn::Integer: number of samples in bed file.\n\nKeyword arguments\n\nnullfile::Union{AbstractString, IOStream}: output file for the fitted null model;    default is ordinalgwas.null.txt. \npvalfile::Union{AbstractString, IOStream}: output file for the gwas p-values; default is    ordinalgwas.pval.txt. \ncovtype::Vector{DataType}: type information for covfile. This is useful   when CSV.read(covarfile) has parsing errors.  \ncovrowinds::Union{Nothing,AbstractVector{<:Integer}}: sample indices for covariate file.  \ntestformula::FormulaTerm: formula for test unit. Default is @formula(trait ~ 0 + snp).\ntest::Symbol: :score (default) or :lrt.  \nlink::GLM.Link: LogitLink() (default), ProbitLink(), CauchitLink(),   or CloglogLink().\nsnpmodel: ADDITIVE_MODEL (default), DOMINANT_MODEL, or RECESSIVE_MODEL.\nsnpinds::Union{Nothing,AbstractVector{<:Integer}}: SNP indices for bed file.\nbedrowinds::Union{Nothing,AbstractVector{<:Integer}}: sample indices for bed file.\nsolver: an optimization solver supported by MathProgBase. Default is    NLoptSolver(algorithm=:LD_SLSQP, maxeval=4000). Another common choice is    IpoptSolver(print_level=0).\nverbose::Bool: default is false.\n\n\n\n\n\n","category":"function"},{"location":"#Formula-for-null-model-1","page":"OrdinalGWAS.jl","title":"Formula for null model","text":"","category":"section"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"The first argument specifies the null model without SNP effects, e.g., @formula(trait ~ sex).","category":"page"},{"location":"#Input-files-1","page":"OrdinalGWAS.jl","title":"Input files","text":"","category":"section"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"ordinalgwas expects two input files: one for responses plus covariates (second argument), the other the Plink files for genotypes (third argument).","category":"page"},{"location":"#Covariate-and-trait-file-1","page":"OrdinalGWAS.jl","title":"Covariate and trait file","text":"","category":"section"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"Covariates and phenotype are provided in a csv file, e.g., covariate.txt, which has one header line for variable names. In this example, variable trait is the ordered categorical phenotypes coded as integers 1 to 4. We want to include variable sex as the covariate in GWAS.","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"run(`head $(datadir)covariate.txt`);","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"famid,perid,faid,moid,sex,trait\n2431,NA19916,0,0,1,4\n2424,NA19835,0,0,2,4\n2469,NA20282,0,0,2,4\n2368,NA19703,0,0,1,3\n2425,NA19901,0,0,2,3\n2427,NA19908,0,0,1,4\n2430,NA19914,0,0,2,4\n2470,NA20287,0,0,2,1\n2436,NA19713,0,0,2,3","category":"page"},{"location":"#Plink-file-1","page":"OrdinalGWAS.jl","title":"Plink file","text":"","category":"section"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"Genotype data is available as binary Plink files.","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"readdir(glob\"hapmap3.*\", datadir)","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"4-element Array{String,1}:\n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.bed\"\n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.bim\"\n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.fam\"\n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.map\"","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"In this example, there are 324 samples at 13,928 SNPs.","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"size(SnpArray(datadir * \"hapmap3.bed\"))","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"(324, 13928)","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"Compressed Plink files are supported. For example, if Plink files are hapmap3.bed.gz, hapmap3.bim.gz and hapmap3.fam.gz, the same command","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"ordinalgwas(@formula(trait ~ sex), datadir * \"covariate.txt\", datadir * \"hapmap3\")","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"still works. Check all supported compression format by","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"SnpArrays.ALLOWED_FORMAT","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"6-element Array{String,1}:\n \"gz\"  \n \"zlib\"\n \"zz\"  \n \"xz\"  \n \"zst\" \n \"bz2\"","category":"page"},{"location":"#Output-files-1","page":"OrdinalGWAS.jl","title":"Output files","text":"","category":"section"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"ordinalgwas outputs two files: ordinalgwas.null.txt and ordinalgwas.pval.txt. ","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"ordinalgwas.null.txt lists the estimated null model (without SNPs). ","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"run(`cat ordinalgwas.null.txt`);","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"StatsModels.TableRegressionModel{OrdinalMultinomialModel{Int64,Float64,LogitLink},Array{Float64,2}}\n\ntrait ~ sex\n\nCoefficients:\n──────────────────────────────────────────────────────\n               Estimate  Std.Error   t value  Pr(>|t|)\n──────────────────────────────────────────────────────\nintercept1|2  -1.48564    0.358891  -4.13952    <1e-4 \nintercept2|3  -0.569479   0.341044  -1.66981    0.0959\nintercept3|4   0.429815   0.339642   1.26549    0.2066\nsex            0.424656   0.213914   1.98517    0.0480\n──────────────────────────────────────────────────────","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"ordinalgwas.pval.txt tallies the SNPs and their pvalues. ","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"run(`head ordinalgwas.pval.txt`);","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"chr,pos,snpid,maf,hwepval,pval\n1,554484,rs10458597,0.0,1.0,1.0\n1,758311,rs12562034,0.07763975155279501,0.40987633326666817,0.004565312839540994\n1,967643,rs2710875,0.32407407407407407,4.0762491007057454e-7,3.108283828554874e-5\n1,1168108,rs11260566,0.19158878504672894,0.12856822794469086,1.2168672367668889e-5\n1,1375074,rs1312568,0.441358024691358,2.537601965061486e-19,0.008206860046175225\n1,1588771,rs35154105,0.0,1.0,1.0\n1,1789051,rs16824508,0.00462962962962965,0.9332783156468178,0.5111981332544\n1,1990452,rs2678939,0.4537037037037037,5.0769595770843126e-11,0.2997282957184783\n1,2194615,rs7553178,0.22685185185185186,0.17056143157457782,0.1713331245805063","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"Output file names can be changed by the nullfile and pvalfile keywords respectively. For example, ","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"ordinalgwas(@formula(trait ~ sex), datadir * \"covariate.txt\", datadir * \"hapmap3\", pvalfile=\"ordinalgwas.pval.txt.gz\")","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"will output the p-value file in compressed gz format.","category":"page"},{"location":"#Subsamples-1","page":"OrdinalGWAS.jl","title":"Subsamples","text":"","category":"section"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"Use the keyword covrowinds to specify selected samples in the covarite file. Use the keyword bedrowinds to specify selected samples in the Plink bed file. For example, to use the first 300 samples in both covariate and bed file:","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"ordinalgwas(@formula(trait ~ sex), covfile, plkfile, covrowinds=1:300, bedrowinds=1:300)","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"note: Note\nUsers should always make sure that the selected samples in covariate file match exactly those in bed file. ","category":"page"},{"location":"#Input-non-genetic-data-as-DataFrame-1","page":"OrdinalGWAS.jl","title":"Input non-genetic data as DataFrame","text":"","category":"section"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"Internally ordinalgwas parses the covariate file as a DataFrame by CSV.read(covfile). For covariate file of other formats, users can parse it as a DataFrame and then input the DataFrame to ordinalgwas directly.","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"ordinalgwas(@formula(trait ~ sex), df, plinkfile)","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"note: Note\nUsers should always make sure that individuals in covariate file or DataFrame match those in Plink fam file. ","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"For example, following code checks that the first 2 columns of the covariate.txt file match the first 2 columns of the hapmap3.fam file exactly.","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"covdf = CSV.read(datadir * \"covariate.txt\")\nplkfam = CSV.read(datadir * \"hapmap3.fam\", header=0, delim=' ')\nall(covdf[!, 1] .== plkfam[!, 1]) && all(covdf[!, 2] .== plkfam[!, 2])","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"true","category":"page"},{"location":"#Timing-1","page":"OrdinalGWAS.jl","title":"Timing","text":"","category":"section"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"For this moderate-sized data set, ordinalgwas takes around 0.2 seconds.","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"@btime(ordinalgwas(@formula(trait ~ sex), datadir * \"covariate.txt\", datadir * \"hapmap3\"));","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"  210.824 ms (639565 allocations: 32.70 MiB)","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"# clean up\nrm(\"ordinalgwas.null.txt\", force=true)\nrm(\"ordinalgwas.pval.txt\", force=true)","category":"page"},{"location":"#Link-functions-1","page":"OrdinalGWAS.jl","title":"Link functions","text":"","category":"section"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"The link keyword argument of ordinalgwas can take value:  ","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"LogitLink(), proportional odds model (default),  \nProbitLink(), ordred Probit model,  \nCloglogLink(), proportional hazards model, or \nCauchyLink().","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"For example, to perform GWAS using the ordred Probit model","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"ordinalgwas(@formula(trait ~ sex), datadir * \"covariate.txt\", datadir * \"hapmap3\", \n    link=ProbitLink(), nullfile=\"opm.null.txt\", pvalfile=\"opm.pval.txt\")","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"StatsModels.TableRegressionModel{OrdinalMultinomialModel{Int64,Float64,ProbitLink},Array{Float64,2}}\n\ntrait ~ sex\n\nCoefficients:\n──────────────────────────────────────────────────────\n               Estimate  Std.Error   t value  Pr(>|t|)\n──────────────────────────────────────────────────────\nintercept1|2  -0.866156   0.210677  -4.11129    <1e-4 \nintercept2|3  -0.359878   0.205817  -1.74854    0.0813\nintercept3|4   0.247054   0.205382   1.2029     0.2299\nsex            0.251058   0.128225   1.95795    0.0511\n──────────────────────────────────────────────────────","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"The estimates in null model and p-values are slightly different from those in proportional odds moodel.","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"run(`head opm.pval.txt`);","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"chr,pos,snpid,maf,hwepval,pval\n1,554484,rs10458597,0.0,1.0,1.0\n1,758311,rs12562034,0.07763975155279501,0.40987633326666817,0.010076916742300138\n1,967643,rs2710875,0.32407407407407407,4.0762491007057454e-7,2.6272564941853933e-5\n1,1168108,rs11260566,0.19158878504672894,0.12856822794469086,1.089748485107844e-5\n1,1375074,rs1312568,0.441358024691358,2.537601965061486e-19,0.005102883990438149\n1,1588771,rs35154105,0.0,1.0,1.0\n1,1789051,rs16824508,0.00462962962962965,0.9332783156468178,0.48653776297859236\n1,1990452,rs2678939,0.4537037037037037,5.0769595770843126e-11,0.33231290090455434\n1,2194615,rs7553178,0.22685185185185186,0.17056143157457782,0.2591551397719743","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"rm(\"opm.null.txt\", force=true)\nrm(\"opm.pval.txt\", force=true)","category":"page"},{"location":"#SNP-models-1","page":"OrdinalGWAS.jl","title":"SNP models","text":"","category":"section"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"Genotypes are translated into numeric values according to different genetic model, which is specified by the snpmodel keyword. Default is ADDITIVE_MODEL.","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"Genotype SnpArray ADDITIVE_MODEL DOMINANT_MODEL RECESSIVE_MODEL\nA1,A1 0x00 0 0 0\nmissing 0x01 NaN NaN NaN\nA1,A2 0x02 1 1 0\nA2,A2 0x03 2 1 1","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"note: Note\nordinalgwas imputes missing genotypes according to minor allele frequencies. ","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"Users are advised to impute genotypes using more sophiscated methods before GWAS.","category":"page"},{"location":"#SNP-and/or-sample-masks-1","page":"OrdinalGWAS.jl","title":"SNP and/or sample masks","text":"","category":"section"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"In practice, we often perform GWAS on selected SNPs and/or selected samples. They can be specified by the snpinds, covrowinds and bedrowinds keywords of ordinalgwas function. ","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"For example, to perform GWAS on SNPs with minor allele frequency (MAF) above 0.05","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"# create SNP mask\nsnpinds = maf(SnpArray(\"../data/hapmap3.bed\")) .≥ 0.05\n# GWAS on selected SNPs\n@time ordinalgwas(@formula(trait ~ sex), datadir * \"covariate.txt\", datadir * \"hapmap3\", \n    snpinds=snpinds, nullfile=\"commonvariant.null.txt\", pvalfile=\"commonvariant.pval.txt\")","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"  0.384494 seconds (946.69 k allocations: 49.160 MiB, 3.73% gc time)\n\n\n\n\n\nStatsModels.TableRegressionModel{OrdinalMultinomialModel{Int64,Float64,LogitLink},Array{Float64,2}}\n\ntrait ~ sex\n\nCoefficients:\n──────────────────────────────────────────────────────\n               Estimate  Std.Error   t value  Pr(>|t|)\n──────────────────────────────────────────────────────\nintercept1|2  -1.48564    0.358891  -4.13952    <1e-4 \nintercept2|3  -0.569479   0.341044  -1.66981    0.0959\nintercept3|4   0.429815   0.339642   1.26549    0.2066\nsex            0.424656   0.213914   1.98517    0.0480\n──────────────────────────────────────────────────────","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"run(`head commonvariant.pval.txt`);","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"chr,pos,snpid,maf,hwepval,pval\n1,758311,rs12562034,0.07763975155279501,0.40987633326666817,0.004565312839540994\n1,967643,rs2710875,0.32407407407407407,4.0762491007057454e-7,3.108283828554874e-5\n1,1168108,rs11260566,0.19158878504672894,0.12856822794469086,1.2168672367668889e-5\n1,1375074,rs1312568,0.441358024691358,2.537601965061486e-19,0.008206860046175225\n1,1990452,rs2678939,0.4537037037037037,5.0769595770843126e-11,0.2997282957184783\n1,2194615,rs7553178,0.22685185185185186,0.17056143157457782,0.1713331245805063\n1,2396747,rs13376356,0.1448598130841121,0.905307921507814,0.5320416198875456\n1,2823603,rs1563468,0.4830246913580247,4.2306553724392545e-9,0.225191391783573\n1,3025087,rs6690373,0.2538699690402477,9.23864188719278e-8,0.7018469417717486","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"# extra header line in commonvariant.pval.txt\ncountlines(\"commonvariant.pval.txt\"), count(snpinds)","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"(12086, 12085)","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"# clean up\nrm(\"commonvariant.null.txt\", force=true)\nrm(\"commonvariant.pval.txt\", force=true)","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"covrowinds specify the samples in the covariate file and bedrowinds for SnpArray. User should be particularly careful when using these two keyword. Selected rows in SnpArray should exactly match the samples in the null model. Otherwise the results are meaningless.","category":"page"},{"location":"#Likelihood-ratio-test-(LRT)-1","page":"OrdinalGWAS.jl","title":"Likelihood ratio test (LRT)","text":"","category":"section"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"By default, ordinalgwas calculates p-value for each SNP using score test. Score test is fast because it doesn't require fitting alternative model for each SNP. User can request likelihood ratio test (LRT) using keyword test=:lrt. LRT is much slower but may be more powerful than score test.","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"@time ordinalgwas(@formula(trait ~ sex), datadir * \"covariate.txt\", datadir * \"hapmap3\", \n    test=:LRT, nullfile=\"lrt.null.txt\", pvalfile=\"lrt.pval.txt\")","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":" 27.756967 seconds (8.59 M allocations: 2.106 GiB, 1.77% gc time)\n\n\n\n\n\nStatsModels.TableRegressionModel{OrdinalMultinomialModel{Int64,Float64,LogitLink},Array{Float64,2}}\n\ntrait ~ sex\n\nCoefficients:\n──────────────────────────────────────────────────────\n               Estimate  Std.Error   t value  Pr(>|t|)\n──────────────────────────────────────────────────────\nintercept1|2  -1.48564    0.358891  -4.13952    <1e-4 \nintercept2|3  -0.569479   0.341044  -1.66981    0.0959\nintercept3|4   0.429815   0.339642   1.26549    0.2066\nsex            0.424656   0.213914   1.98517    0.0480\n──────────────────────────────────────────────────────","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"Note the extra effect column in pvalfile, which is the effect size (regression coefficient) for each SNP. ","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"run(`head lrt.pval.txt`);","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"chr,pos,snpid,maf,hwepval,effect,pval\n1,554484,rs10458597,0.0,1.0,0.0,1.0\n1,758311,rs12562034,0.07763975155279501,0.40987633326666817,-1.0057833719544331,0.0019185836579804134\n1,967643,rs2710875,0.32407407407407407,4.0762491007057454e-7,-0.6488560566295055,1.805050556976241e-5\n1,1168108,rs11260566,0.19158878504672894,0.12856822794469086,-0.9157225669357879,5.873384712685568e-6\n1,1375074,rs1312568,0.441358024691358,2.537601965061486e-19,-0.33181366525772593,0.008081022577832324\n1,1588771,rs35154105,0.0,1.0,0.0,1.0\n1,1789051,rs16824508,0.00462962962962965,0.9332783156468178,-0.7338026388701573,0.5169027130129711\n1,1990452,rs2678939,0.4537037037037037,5.0769595770843126e-11,-0.13586499231819726,0.29946402200912603\n1,2194615,rs7553178,0.22685185185185186,0.17056143157457782,-0.2512075640440123,0.16151069094439868","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"# clean up\nrm(\"lrt.pval.txt\", force=true)\nrm(\"lrt.null.txt\", force=true)","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"In this example, GWAS by score test takes less than 0.2 second, while GWAS by LRT takes about 20 seconds. About 100 fold difference in run time. ","category":"page"},{"location":"#Score-test-for-screening,-LRT-for-power-1","page":"OrdinalGWAS.jl","title":"Score test for screening, LRT for power","text":"","category":"section"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"For large data sets, a practical solution is to perform score test first, then re-do LRT for the most promising SNPs according to score test p-values.","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"Step 1: Perform score test GWAS, results in score.pval.txt.","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"@time ordinalgwas(@formula(trait ~ sex), datadir * \"covariate.txt\", datadir * \"hapmap3\", \n    test=:score, pvalfile=\"score.pval.txt\");","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"  0.338187 seconds (668.69 k allocations: 34.240 MiB, 6.17% gc time)","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"run(`head score.pval.txt`);","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"chr,pos,snpid,maf,hwepval,pval\n1,554484,rs10458597,0.0,1.0,1.0\n1,758311,rs12562034,0.07763975155279501,0.40987633326666817,0.004565312839540994\n1,967643,rs2710875,0.32407407407407407,4.0762491007057454e-7,3.108283828554874e-5\n1,1168108,rs11260566,0.19158878504672894,0.12856822794469086,1.2168672367668889e-5\n1,1375074,rs1312568,0.441358024691358,2.537601965061486e-19,0.008206860046175225\n1,1588771,rs35154105,0.0,1.0,1.0\n1,1789051,rs16824508,0.00462962962962965,0.9332783156468178,0.5111981332544\n1,1990452,rs2678939,0.4537037037037037,5.0769595770843126e-11,0.2997282957184783\n1,2194615,rs7553178,0.22685185185185186,0.17056143157457782,0.1713331245805063","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"Step 2: Sort score test p-values and find top 10 SNPs.","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"scorepvals = CSV.read(\"score.pval.txt\")[!, 6] # p-values in 5th column\ntophits = sortperm(scorepvals)[1:10] # indices of 10 SNPs with smallest p-values\nscorepvals[tophits] # smallest 10 p-values","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"10-element Array{Float64,1}:\n 1.3080149099181303e-6\n 6.536722765052079e-6 \n 9.66474218566903e-6  \n 1.2168672367668889e-5\n 1.8027460018331254e-5\n 2.0989542284213636e-5\n 2.6844521269963608e-5\n 3.108283828554874e-5 \n 4.1010912875160476e-5\n 4.2966265138454725e-5","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"Step 3: Re-do LRT on top hits.","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"@time ordinalgwas(@formula(trait ~ sex), datadir * \"covariate.txt\", datadir * \"hapmap3\", \n    snpinds=tophits, test=:LRT, pvalfile=\"lrt.pval.txt\");","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"  0.345620 seconds (512.98 k allocations: 27.686 MiB, 4.47% gc time)","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"run(`cat lrt.pval.txt`);","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"chr,pos,snpid,maf,hwepval,effect,pval\n1,967643,rs2710875,0.32407407407407407,4.0762491007057454e-7,-0.6488560566295055,1.805050556976241e-5\n1,1168108,rs11260566,0.19158878504672894,0.12856822794469086,-0.9157225669357879,5.873384712685568e-6\n3,36821790,rs4678553,0.23456790123456794,0.10946682163244979,0.7424952268973518,1.1303825016262592e-5\n4,11017683,rs16881446,0.27554179566563464,0.8942746118760273,-0.7870581482955515,1.1105427468799613e-5\n5,3739190,rs12521166,0.0679012345679012,0.18613647746093892,1.1468852997925316,4.781288229657399e-5\n6,7574576,rs1885466,0.17746913580246915,0.762068717898719,0.8750621092263019,7.272346896740631e-6\n6,52474721,rs2073183,0.1826625386996904,0.5077765730476698,0.7790794914858663,5.069394513906121e-5\n7,41152376,rs28880,0.3379629629629629,0.8052368892744095,-0.814633902445351,9.180126530294943e-7\n7,84223996,rs4128623,0.07870370370370372,0.021834717346756814,1.0022229316338573,6.587895464657512e-5\n23,121048059,rs1937165,0.4380804953560371,3.959609737265111e-16,0.5392313636256612,1.9754643855522616e-5","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"# clean up\nrm(\"ordinalgwas.null.txt\", force=true)\nrm(\"score.pval.txt\", force=true)\nrm(\"lrt.pval.txt\", force=true)","category":"page"},{"location":"#GxE-or-other-interactions-1","page":"OrdinalGWAS.jl","title":"GxE or other interactions","text":"","category":"section"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"In many applications, we want to test SNP effect and/or its interaction with other terms. testformula keyword specifies the test unit besides the covariates in nullformula. ","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"In following example, keyword testformula=@formula(trait ~ snp + snp & sex) instructs ordinalgwas to test joint effect of snp and snp & sex interaction.","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"ordinalgwas(@formula(trait ~ sex), datadir * \"covariate.txt\", datadir * \"hapmap3\", \n    pvalfile=\"GxE.pval.txt\", testformula=@formula(trait ~ snp + snp & sex));","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"run(`head GxE.pval.txt`);","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"chr,pos,snpid,maf,hwepval,pval\n1,554484,rs10458597,0.0,1.0,1.0\n1,758311,rs12562034,0.07763975155279501,0.40987633326666817,0.01744601041225423\n1,967643,rs2710875,0.32407407407407407,4.0762491007057454e-7,0.0001667073239489097\n1,1168108,rs11260566,0.19158878504672894,0.12856822794469086,4.763762457893383e-5\n1,1375074,rs1312568,0.441358024691358,2.537601965061486e-19,0.02913847124299368\n1,1588771,rs35154105,0.0,1.0,1.0\n1,1789051,rs16824508,0.00462962962962965,0.9332783156468178,0.29643631149443217\n1,1990452,rs2678939,0.4537037037037037,5.0769595770843126e-11,0.37924580479348796\n1,2194615,rs7553178,0.22685185185185186,0.17056143157457782,0.325582269932396","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"# clean up\nrm(\"ordinalgwas.null.txt\")\nrm(\"GxE.pval.txt\")","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"For some applications, the user may want to simply test the GxE interaction effect. This requires fitting the SNP in the null model and is quite slower, but the command ordinalgwasGxE() can be used test the interaction effect. To do this you must specify the environmental variable in the command, either as a symbol, such as \":age\" or as a string \"age\". ","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"For documentation of the ordinalgwasGxE function, type ?ordinalgwasGxE in Julia REPL.","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"ordinalgwasGxE","category":"page"},{"location":"#OrdinalGWAS.ordinalgwasGxE","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.ordinalgwasGxE","text":"ordinalgwasGxE(nullformula, covfile, plinkfile, e)\nordinalgwasGxE(nullformula, df, plinkfile, e)\nordinalgwasGxE(fittednullmodel, plinkfile, e)\nordinalgwasGxE(fittednullmodel, bedfile, bimfile, bedn, e)\n\nPositional arguments\n\nnullformula::FormulaTerm: formula for the null model.\ncovfile::AbstractString: covariate file (csv) with one header line. One column    should be the ordinal phenotype coded as integers starting from 1.  For example,    ordinal phenotypes can be coded as 1, 2, 3, 4 but not 0, 1, 2, 3.  \ndf::DataFrame: DataFrame containing response and regressors for null model.\nplinkfile::AbstractString: Plink file name without the bed, fam, or bim    extensions. If plinkfile==nothing, only null model is fitted. If plinkfile    is provided, bed, bim, and fam file with same plinkfile prefix need to exist.    Compressed file formats such as gz and bz2 are allowed. Check all allowed formats    by SnpArrays.ALLOWED_FORMAT.  \ne::Union{AbstractString,Symbol}: Enviromental variable to be used to test the GxE interaction.\n\nFor instance, for testing sex & snp interaction, use :sex or \"sex\".\n\nfittednullmodel::StatsModels.TableRegressionModel: the fitted null model    output from ordinalgwas(nullformula, covfile) or ordinalgwas(nullformula, df).\nbedfile::Union{AbstractString,IOStream}: path to Plink bed file with full file name.\nbimfile::Union{AbstractString,IOStream}: path to Plink bim file with full file name.\nbedn::Integer: number of samples in bed file.\n\nKeyword arguments\n\nnullfile::Union{AbstractString, IOStream}: output file for the fitted null model;    default is ordinalgwas.null.txt. \npvalfile::Union{AbstractString, IOStream}: output file for the gwas p-values; default is    ordinalgwas.pval.txt. \ncovtype::Vector{DataType}: type information for covfile. This is useful   when CSV.read(covarfile) has parsing errors.  \ncovrowinds::Union{Nothing,AbstractVector{<:Integer}}: sample indices for covariate file.  \ntest::Symbol: :score (default) or :lrt.  \nlink::GLM.Link: LogitLink() (default), ProbitLink(), CauchitLink(),   or CloglogLink().\nsnpmodel: ADDITIVE_MODEL (default), DOMINANT_MODEL, or RECESSIVE_MODEL.\nsnpinds::Union{Nothing,AbstractVector{<:Integer}}: SNP indices for bed file.\nbedrowinds::Union{Nothing,AbstractVector{<:Integer}}: sample indices for bed file.\nsolver: an optimization solver supported by MathProgBase. Default is    NLoptSolver(algorithm=:LD_SLSQP, maxeval=4000). Another common choice is    IpoptSolver(print_level=0).\nverbose::Bool: default is false.\n\n\n\n\n\n","category":"function"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"ordinalgwasGxE(@formula(trait ~ sex), datadir * \"covariate.txt\", datadir * \"hapmap3\",\n    :sex, pvalfile = \"gxe_snp.pval.txt\", snpinds=1:5, test=:score)","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"StatsModels.TableRegressionModel{OrdinalMultinomialModel{Int64,Float64,LogitLink},Array{Float64,2}}\n\ntrait ~ sex\n\nCoefficients:\n──────────────────────────────────────────────────────\n               Estimate  Std.Error   t value  Pr(>|t|)\n──────────────────────────────────────────────────────\nintercept1|2  -1.48564    0.358891  -4.13952    <1e-4 \nintercept2|3  -0.569479   0.341044  -1.66981    0.0959\nintercept3|4   0.429815   0.339642   1.26549    0.2066\nsex            0.424656   0.213914   1.98517    0.0480\n──────────────────────────────────────────────────────","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"run(`head gxe_snp.pval.txt`);","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"chr,pos,snpid,maf,hwepval,snpeffectnull,pval\n1,554484,rs10458597,0.0,1.0,0.0,1.0\n1,758311,rs12562034,0.07763975155279501,0.40987633326666817,-1.0057833719544331,0.6377422425977491\n1,967643,rs2710875,0.32407407407407407,4.0762491007057454e-7,-0.6488560566295055,0.9667114198051628\n1,1168108,rs11260566,0.19158878504672894,0.12856822794469086,-0.9157225669357879,0.26352674694121003\n1,1375074,rs1312568,0.441358024691358,2.537601965061486e-19,-0.33181366525772593,0.7811133315582837","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"# clean up\nrm(\"gxe_snp.pval.txt\", force=true)","category":"page"},{"location":"#SNP-set-testing-1","page":"OrdinalGWAS.jl","title":"SNP-set testing","text":"","category":"section"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"In many applications, we want to test a SNP-set. The function ordinalsnpsetgwas() can be used to do this. The snpset can be specified as either a window (test every X snps), a filename that specifies an input file, with no header and two columns separated by a space. The first column must contain the snpset ID and the second column must contain the snpid's identical to the bimfile, or an AbstractVector that allows you to specify the snps you want to perform one joint snpset test for.","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"For documentation of the ordinalsnpsetgwas function, type ?ordinalsnpsetgwas in Julia REPL.","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"ordinalsnpsetgwas","category":"page"},{"location":"#OrdinalGWAS.ordinalsnpsetgwas","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.ordinalsnpsetgwas","text":"ordinalsnpsetgwas(nullformula, covfile, plinkfile)\nordinalsnpsetgwas(nullformula, df, plinkfile)\nordinalsnpsetgwas(fittednullmodel, plinkfile)\nordinalsnpsetgwas(fittednullmodel, bedfile, bimfile, bedn)\n\nPositional arguments\n\nnullformula::FormulaTerm: formula for the null model.\ncovfile::AbstractString: covariate file (csv) with one header line. One column    should be the ordinal phenotype coded as integers starting from 1.  For example,    ordinal phenotypes can be coded as 1, 2, 3, 4 but not 0, 1, 2, 3.  \ndf::DataFrame: DataFrame containing response and regressors for null model.\nplinkfile::AbstractString: Plink file name without the bed, fam, or bim    extensions. If plinkfile==nothing, only null model is fitted. If plinkfile    is provided, bed, bim, and fam file with same plinkfile prefix need to exist.    Compressed file formats such as gz and bz2 are allowed. Check all allowed formats    by SnpArrays.ALLOWED_FORMAT.  \nfittednullmodel::StatsModels.TableRegressionModel: the fitted null model    output from ordinalgwas(nullformula, covfile) or ordinalgwas(nullformula, df).\nbedfile::Union{AbstractString,IOStream}: path to Plink bed file with full file name.\nbimfile::Union{AbstractString,IOStream}: path to Plink bim file with full file name.\nbedn::Integer: number of samples in bed file.\n\nKeyword arguments\n\nnullfile::Union{AbstractString, IOStream}: output file for the fitted null model;    default is ordinalgwas.null.txt. \npvalfile::Union{AbstractString, IOStream}: output file for the gwas p-values; default is    ordinalgwas.pval.txt. \nsnpset::Union{Nothing, Integer, AbstractString, AbstractVector{<:Integer}}: Only include    if you are conducting a snpset analysis. An integer indicates a window of SNPs    (i.e. every 500 snps). An abstract string allows you to specify an input file,    with no header and two columns separated by a space. The first column must contain the snpset ID   and the second column must contain the snpid's identical to the bimfile. An AbstractVector   allows you to specify the snps you want to perform one joint snpset test for.\ncovtype::Vector{DataType}: type information for covfile. This is useful   when CSV.read(covarfile) has parsing errors.  \ncovrowinds::Union{Nothing,AbstractVector{<:Integer}}: sample indices for covariate file.  \ntest::Symbol: :score (default) or :lrt.  \nlink::GLM.Link: LogitLink() (default), ProbitLink(), CauchitLink(),   or CloglogLink().\nsnpmodel: ADDITIVE_MODEL (default), DOMINANT_MODEL, or RECESSIVE_MODEL.\nsnpinds::Union{Nothing,AbstractVector{<:Integer}}: SNP indices for bed file.\nbedrowinds::Union{Nothing,AbstractVector{<:Integer}}: sample indices for bed file.\nsolver: an optimization solver supported by MathProgBase. Default is    NLoptSolver(algorithm=:LD_SLSQP, maxeval=4000). Another common choice is    IpoptSolver(print_level=0).\nverbose::Bool: default is false.\n\n\n\n\n\n","category":"function"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"In following example, we perform a SNP-set test on the 50th to 55th snps. ","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"ordinalsnpsetgwas(@formula(trait ~ sex), datadir * \"covariate.txt\", datadir * \"hapmap3\",\n    pvalfile = \"snpset.pval.txt\", snpset = 50:55)","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"StatsModels.TableRegressionModel{OrdinalMultinomialModel{Int64,Float64,LogitLink},Array{Float64,2}}\n\ntrait ~ sex\n\nCoefficients:\n──────────────────────────────────────────────────────\n               Estimate  Std.Error   t value  Pr(>|t|)\n──────────────────────────────────────────────────────\nintercept1|2  -1.48564    0.358891  -4.13952    <1e-4 \nintercept2|3  -0.569479   0.341044  -1.66981    0.0959\nintercept3|4   0.429815   0.339642   1.26549    0.2066\nsex            0.424656   0.213914   1.98517    0.0480\n──────────────────────────────────────────────────────","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"run(`head snpset.pval.txt`);","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"The joint pvalue of snps indexed at 50:55 is 0.36471265366639605","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"# clean up\nrm(\"snpset.pval.txt\", force=true)\nrm(\"ordinalgwas.null.txt\", force=true)","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"In the following example we run a SNP-set test on the annotated SNP-set file.","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"run(`head ../data/hapmap_snpsetfile.txt`);","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"gene1 rs10458597\ngene1 rs12562034\ngene1 rs2710875\ngene1 rs11260566\ngene1 rs1312568\ngene1 rs35154105\ngene1 rs16824508\ngene1 rs2678939\ngene1 rs7553178\ngene1 rs13376356","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"ordinalsnpsetgwas(@formula(trait ~ sex), datadir * \"covariate.txt\", datadir * \"hapmap3\",\n    pvalfile = \"snpset.pval.txt\", snpset = datadir * \"/hapmap_snpsetfile.txt\")","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"StatsModels.TableRegressionModel{OrdinalMultinomialModel{Int64,Float64,LogitLink},Array{Float64,2}}\n\ntrait ~ sex\n\nCoefficients:\n──────────────────────────────────────────────────────\n               Estimate  Std.Error   t value  Pr(>|t|)\n──────────────────────────────────────────────────────\nintercept1|2  -1.48564    0.358891  -4.13952    <1e-4 \nintercept2|3  -0.569479   0.341044  -1.66981    0.0959\nintercept3|4   0.429815   0.339642   1.26549    0.2066\nsex            0.424656   0.213914   1.98517    0.0480\n──────────────────────────────────────────────────────","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"run(`head snpset.pval.txt`);","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"snpsetid,nsnps,pval\ngene1,93,1.72133946991466e-5\ngene2,93,0.03692497684330217\ngene3,93,0.7478549371392197\ngene4,92,0.027650798223816195\ngene5,93,0.6119581594582347\ngene6,93,0.029184642230868463\ngene7,93,0.3916007348891039\ngene8,93,0.1253957410986018\ngene9,93,0.7085635621609013","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"# clean up\nrm(\"snpset.pval.txt\", force=true)\nrm(\"ordinalgwas.null.txt\", force=true)","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"In the following example we run a SNP-set test on every 15 SNPs.","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"ordinalsnpsetgwas(@formula(trait ~ sex), datadir * \"covariate.txt\", datadir * \"hapmap3\",\n    pvalfile = \"snpset.pval.txt\", snpset=15)","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"StatsModels.TableRegressionModel{OrdinalMultinomialModel{Int64,Float64,LogitLink},Array{Float64,2}}\n\ntrait ~ sex\n\nCoefficients:\n──────────────────────────────────────────────────────\n               Estimate  Std.Error   t value  Pr(>|t|)\n──────────────────────────────────────────────────────\nintercept1|2  -1.48564    0.358891  -4.13952    <1e-4 \nintercept2|3  -0.569479   0.341044  -1.66981    0.0959\nintercept3|4   0.429815   0.339642   1.26549    0.2066\nsex            0.424656   0.213914   1.98517    0.0480\n──────────────────────────────────────────────────────","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"run(`head snpset.pval.txt`);","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"startchr,startpos,startsnpid,endchr,endpos,endsnpid,pval\n1,554484,rs10458597,1,3431124,rs12093117,1.9394189465782687e-13\n1,3633945,rs10910017,1,6514524,rs932112,0.11077869162820388\n1,6715827,rs441515,1,9534606,rs4926480,0.2742450817971269\n1,9737551,rs12047054,1,12559747,rs4845907,0.49346113650468615\n1,12760427,rs848577,1,16021797,rs6679870,0.15447358658305502\n1,16228774,rs1972359,1,19100349,rs9426794,0.1544232917025094\n1,19301516,rs4912046,1,22122176,rs9426785,0.474987334946532\n1,22323074,rs2235529,1,25166528,rs4648890,0.41246096621475836\n1,25368553,rs7527379,1,28208168,rs12140070,0.1645813527877886","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"# clean up\nrm(\"snpset.pval.txt\", force=true)\nrm(\"ordinalgwas.null.txt\", force=true)","category":"page"},{"location":"#Plotting-Results-1","page":"OrdinalGWAS.jl","title":"Plotting Results","text":"","category":"section"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"To plot the GWAS results, use the MendelPlots.jl package.","category":"page"},{"location":"#Docker-1","page":"OrdinalGWAS.jl","title":"Docker","text":"","category":"section"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"For ease of using OrdinalGWAS, we provide a Dockerfile so users don't need to install Julia and required packages. Only Docker app needs to be installed in order to run analysis. Following is tested on Docker 2.0.0.0-mac78.","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"Step 1: Create a Dockerfile with content here, or, if the bash command wget is available, obtain Dockerfile by","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"# on command line\nwget https://raw.githubusercontent.com/OpenMendel/OrdinalGWAS.jl/master/docker/Dockerfile","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"Step 2: Build a docker image called ordinalgwas-app, assuming that the Dockerfile is located in the ../docker folder. Building the image for the first time can take up to 10 minutes; but it only needs to be done once.","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"# on command line\ndocker build -t ordinalgwas-app ../docker/","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"Step 3: Suppose data files are located at /path/to/data folder, run analysis by","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"# on command line\ndocker run -v /path/to/data:/data -t ordinalgwas-app julia -e 'using OrdinalGWAS; ordinalgwas(@formula(trait ~ sex), \"/data/covariate.txt\", \"/data/hapmap3\", nullfile=\"/data/ordinalgwas.null.txt\", pvalfile=\"/data/ordinalgwas\");'","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"Here  ","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"-t ordinalgwas-app creates a container using the ordinalgwas-app image build in step 2.  \n-v /path/to/data:/data maps the /path/to/data folder on host machine to the /data folder within the container. \njulia -e 'using OrdinalGWAS; ordinalgwas(@formula(trait ~ sex), \"/data/covariate.txt\", \"/data/hapmap3\", nullfile=\"/data/ordinalgwas.null.txt\", pvalfile=\"/data/ordinalgwas\"); calls Julia and runs ordinalgwas function. ","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"The output files are written in /path/to/data directory.","category":"page"},{"location":"#Multiple-Plink-file-sets-1","page":"OrdinalGWAS.jl","title":"Multiple Plink file sets","text":"","category":"section"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"In large scale studies, genotypes data are split into multiple Plink files, e.g., by chromosome. Then GWAS analysis can be done in parallel. This can be achieved by two steps.","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"Let's first create demo data by splitting hapmap3 according to chromosome:","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"# split example hapmap3 data according to chromosome\nSnpArrays.split_plink(datadir * \"hapmap3\", :chromosome; prefix=datadir * \"hapmap3.chr.\")\nreaddir(glob\"hapmap3.chr.*\", datadir)","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"┌ Warning: `getindex(df::DataFrame, col_ind::ColumnIndex)` is deprecated, use `df[!, col_ind]` instead.\n│   caller = #split_plink#77(::String, ::typeof(split_plink), ::SnpData, ::Symbol) at snpdata.jl:94\n└ @ SnpArrays /Users/christophergerman/.julia/packages/SnpArrays/d0iJw/src/snpdata.jl:94\n\n\n\n\n\n75-element Array{String,1}:\n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.1.bed\" \n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.1.bim\" \n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.1.fam\" \n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.10.bed\"\n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.10.bim\"\n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.10.fam\"\n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.11.bed\"\n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.11.bim\"\n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.11.fam\"\n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.12.bed\"\n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.12.bim\"\n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.12.fam\"\n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.13.bed\"\n ⋮                                                                        \n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.6.bed\" \n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.6.bim\" \n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.6.fam\" \n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.7.bed\" \n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.7.bim\" \n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.7.fam\" \n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.8.bed\" \n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.8.bim\" \n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.8.fam\" \n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.9.bed\" \n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.9.bim\" \n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.9.fam\"","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"Step 1: Fit the null model. Setting third argument plinkfile to nothing instructs ordinalgwas function to fit the null model only.","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"nm = ordinalgwas(@formula(trait ~ sex), datadir * \"covariate.txt\", nothing)","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"StatsModels.TableRegressionModel{OrdinalMultinomialModel{Int64,Float64,LogitLink},Array{Float64,2}}\n\ntrait ~ sex\n\nCoefficients:\n──────────────────────────────────────────────────────\n               Estimate  Std.Error   t value  Pr(>|t|)\n──────────────────────────────────────────────────────\nintercept1|2  -1.48564    0.358891  -4.13952    <1e-4 \nintercept2|3  -0.569479   0.341044  -1.66981    0.0959\nintercept3|4   0.429815   0.339642   1.26549    0.2066\nsex            0.424656   0.213914   1.98517    0.0480\n──────────────────────────────────────────────────────","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"Step 2: GWAS for each chromosome.","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"# this part can be submitted as separate jobs\nfor chr in 1:23\n    plinkfile = datadir * \"hapmap3.chr.\" * string(chr)\n    pvalfile = plinkfile * \".pval.txt\" \n    ordinalgwas(nm, plinkfile, pvalfile=pvalfile)\nend","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"# show the result files\nreaddir(glob\"*.pval.txt\", datadir)","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"23-element Array{String,1}:\n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.1.pval.txt\" \n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.10.pval.txt\"\n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.11.pval.txt\"\n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.12.pval.txt\"\n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.13.pval.txt\"\n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.14.pval.txt\"\n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.15.pval.txt\"\n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.16.pval.txt\"\n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.17.pval.txt\"\n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.18.pval.txt\"\n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.19.pval.txt\"\n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.2.pval.txt\" \n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.20.pval.txt\"\n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.21.pval.txt\"\n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.22.pval.txt\"\n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.23.pval.txt\"\n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.3.pval.txt\" \n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.4.pval.txt\" \n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.5.pval.txt\" \n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.6.pval.txt\" \n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.7.pval.txt\" \n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.8.pval.txt\" \n \"/Users/christophergerman/.julia/dev/OrdinalGWAS/data/hapmap3.chr.9.pval.txt\"","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"In the rare situations where the multiple sets of Plink files lack the fam file or the corresponding bed and bim files have different filenames, users can explicitly supply bed filename, bim file name, and number of individuals. Replace Step 2 by ","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"Step 2': GWAS for each chromosome.","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"# this part can be submitted as separate jobs\nfor chr in 1:23\n    bedfile = datadir * \"hapmap3.chr.\" * string(chr) * \".bed\"\n    bimfile = datadir * \"hapmap3.chr.\" * string(chr) * \".bim\"\n    pvalfile = datadir * \"hapmap3.chr.\" * string(chr) * \".pval.txt\"\n    ordinalgwas(nm, bedfile, bimfile, 324; pvalfile=pvalfile)\nend","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"# clean up\nrm(\"ordinalgwas.null.txt\", force=true)\nisfile(datadir * \"fittednullmodel.jld2\") && rm(datadir * \"fittednullmodel.jld2\")\nfor chr in 1:23\n    pvalfile = datadir * \"hapmap3.chr.\" * string(chr) * \".pval.txt\"\n    rm(pvalfile, force=true)\nend\nfor chr in 1:26\n    plinkfile = datadir * \"hapmap3.chr.\" * string(chr)\n    rm(plinkfile * \".bed\", force=true)\n    rm(plinkfile * \".fam\", force=true)\n    rm(plinkfile * \".bim\", force=true)\nend","category":"page"},{"location":"#Multiple-Plink-file-sets-on-cluster-1","page":"OrdinalGWAS.jl","title":"Multiple Plink file sets on cluster","text":"","category":"section"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"We provide two scripts that successfully run on UCLA's Hoffman2 cluster using Julia v1.0.1 and PBS job schedulaer (qsub).","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"The first script cluster_preparedata.jl creates a demo data set in current folder. Run","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"julia cluster_preparedata.jl","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"on head node.","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"run(`cat cluster_preparedata.jl`);","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"#!/usr/local/bin/julia\n#\n# This script prepares a data set in current folder. \n# For each of chromosome 1-23, there is a set gzipped Plink files:\n# hapmap3.chr.1.bed.gz, hapmap3.chr.1.bim.gz, hapmap3.chr.1.fam.gz\n# hapmap3.chr.2.bed.gz, hapmap3.chr.2.bim.gz, hapmap3.chr.2.fam.gz\n# ...\n# hapmap3.chr.23.bed.gz, hapmap3.chr.23.bim.gz, hapmap3.chr.23.fam.gz\n# There is also a csv file \"covariate.txt\" that contains trait and covariates.\n#\n\n# install and load Julia packages\nusing Pkg\nif haskey(Pkg.installed(), \"SnpArrays\")\n    Pkg.update(\"SnpArrays\")\nelse\n    Pkg.add(PackageSpec(url=\"https://github.com/OpenMendel/SnpArrays.jl.git\"))\nend\nif haskey(Pkg.installed(), \"OrdinalMultinomialModels\")\n    Pkg.update(\"OrdinalMultinomialModels\")\nelse\n    Pkg.add(PackageSpec(url=\"https://github.com/OpenMendel/OrdinalMultinomialModels.jl.git\"))\nend\nif haskey(Pkg.installed(), \"OrdinalGWAS\")\n    Pkg.update(\"OrdinalGWAS\")\nelse\n    Pkg.add(PackageSpec(url=\"https://github.com/OpenMendel/OrdinalGWAS.jl.git\"))\nend\nusing OrdinalMultinomialModels, OrdinalGWAS, SnpArrays\n\n# split hapmap3 data according to chromosome\ndatadir = normpath(joinpath(dirname(pathof(OrdinalGWAS)), \"../data/\"))\nSnpArrays.split_plink(datadir * \"hapmap3\", :chromosome; prefix = \"hapmap3.chr.\")\n# compresse Plink files for chromosome 1-23\nfor chr in 1:23\n    plinkfile = \"hapmap3.chr.\" * string(chr)\n    SnpArrays.compress_plink(plinkfile)\nend\n# delete uncompressed chromosome Plink files\nfor chr in 1:26\n    plinkfile = \"hapmap3.chr.\" * string(chr)\n    rm(plinkfile * \".bed\", force=true)\n    rm(plinkfile * \".bim\", force=true)\n    rm(plinkfile * \".fam\", force=true)\nend\n# copy covariate.txt file\ncp(datadir * \"covariate.txt\", joinpath(pwd(), \"covariate.txt\"))","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"The second script cluster_run.jl first fits the null model then submits a separate job for each chromosome. Run","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"julia cluster_run.jl","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"on head node.","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"run(`cat cluster_run.jl`);","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"#!/usr/local/bin/julia\n#\n# This script demonstrates how to submit multiple OrdinalGWAS runs from multiple sets of\n# Plink files on UCLA Hoffman2 cluster. It assumes that a demo data is available by\n# running `julia cluster_preparedata.jl` at current folder.\n#\n\nusing OrdinalGWAS, Serialization\n\n# Step 1: fit null model and save result to file `fittednullmodel.jls`\nnm = ordinalgwas(@formula(trait ~ sex), \"covariate.txt\", nothing)\nopen(\"fittednullmodel.jls\", \"w\") do io\n    Serialization.serialize(io, nm)\nend\n\n# Step 2: GWAS for each chromosome\nfor chr in 1:23\n    println(\"submit job for chromosome=$chr\")\n    jcode = \"using OrdinalGWAS, Serialization;\n    nm = open(deserialize, \\\"fittednullmodel.jls\\\");\n    bedfile = \\\"hapmap3.chr.\\\" * string($chr) * \\\".bed.gz\\\";\n    bimfile = \\\"hapmap3.chr.\\\" * string($chr) * \\\".bim.gz\\\";\n    pvalfile = \\\"hapmap3.chr.\\\" * string($chr) * \\\".pval.txt\\\";\n    ordinalgwas(nm, bedfile, bimfile, 324; pvalfile=pvalfile);\"\n    # prepare sh file for qsub\n    open(\"tmp.sh\", \"w\") do io\n        println(io, \"#!/bin/bash\")\n        println(io, \"#\\$ -cwd\")\n        println(io, \"# error = Merged with joblog\")\n        println(io, \"#\\$ -o joblog.\\$JOB_ID\")\n        println(io, \"#\\$ -j y\")\n        println(io, \"#\\$ -l h_rt=0:30:00,h_data=2G\") # request runtime and memory\n        println(io, \"#\\$ -pe shared 2\") # request # shared-memory nodes\n        println(io, \"# Email address to notify\")\n        println(io, \"#\\$ -M \\$USER@mail\")\n        println(io, \"# Notify when\")\n        println(io, \"#\\$ -m a\")\n        println(io)\n        println(io, \"# load the job environment:\")\n        println(io, \". /u/local/Modules/default/init/modules.sh\")\n        println(io, \"module load julia/1.0.1\") # available Julia version\n        println(io)\n        println(io, \"# run julia code\")\n        println(io, \"julia -e '$jcode' > output.\\$JOB_ID 2>&1\")\n    end\n    # submit job\n    run(`qsub tmp.sh`)\nend","category":"page"},{"location":"#","page":"OrdinalGWAS.jl","title":"OrdinalGWAS.jl","text":"","category":"page"}]
}
